import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "8032314005:AAHhMrMW0gze3HwB-if5rnQBiTkrURQcg_s"
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    name = State()
    referrer = State()

# –§–∞–π–ª –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_data.json"

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if any(user_id in entry for entry in data.values()):
        await message.answer("‚ùó –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        return

    button = [[KeyboardButton(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!!! üî•")]]
    reply_markup = ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer(
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à iPhone 16 Pro Max!**\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

@dp.message(lambda message: message.text == "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!!! üî•")
async def participate(message: types.Message, state: FSMContext):
    await message.answer(
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ - –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (@example)",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.\n–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–≤–µ—Ä–∫–∏ –≤–∞—Å –≤ –±–∞–∑–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¢–∏–Ω—å–∫–æ—Ñ—Ñ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.name)

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    full_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞
    if len(full_name.split()) < 2:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –ò–º—è, –∏ –§–∞–º–∏–ª–∏—é!")
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    if any(user_id in entry for entry in data.values()):
        await message.answer("‚ùó –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(full_name=full_name)
    
    await message.answer(
        "üë• –ï—Å–ª–∏ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –∫—Ç–æ-—Ç–æ, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example).\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ (–Ω–∞–∂–º–∏—Ç–µ /skip)",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.referrer)

@dp.message(Form.referrer)
async def process_referrer(message: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    referrer = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    full_name = user_data["full_name"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if referrer.lower() != "–Ω–µ—Ç" and not referrer.startswith("@"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data[user_id] = {
        "full_name": full_name,
        "username": message.from_user.username,
        "referrer": referrer if referrer.lower() != "–Ω–µ—Ç" else None
    }
    save_data(data)
    
    referrer_text = f"\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω: {referrer}" if referrer.lower() != "–Ω–µ—Ç" else ""
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {full_name}!\n"
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ{referrer_text}",
        parse_mode="Markdown"
    )
    await state.clear()

@dp.message(Command("skip"))
async def skip_referrer(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == Form.referrer.state:
        data = load_data()
        user_id = str(message.from_user.id)
        user_data = await state.get_data()
        full_name = user_data["full_name"]
        
        data[user_id] = {
            "full_name": full_name,
            "username": message.from_user.username,
            "referrer": None
        }
        save_data(data)
        
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {full_name}!\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ",
            parse_mode="Markdown"
        )
        await state.clear()

@dp.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ üòî", reply_markup=types.ReplyKeyboardRemove())

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
