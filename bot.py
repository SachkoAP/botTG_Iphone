import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "8032314005:AAHhMrMW0gze3HwB-if5rnQBiTkrURQcg_s"
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    name = State()
    referrer = State()

# –§–∞–π–ª –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_data.json"
ADMIN_FILE = "admin_data.json"

# ID –∞–¥–º–∏–Ω–∞
ADMIN_USERNAME = "@tiuberg"
ADMIN_ID = None

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def load_admin_data():
    try:
        with open(ADMIN_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"admin_id": None, "is_active": False}

def save_admin_data(data):
    with open(ADMIN_FILE, "w") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if any(user_id in entry for entry in data.values()):
        await message.answer("‚ùó –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        return

    button = [[KeyboardButton(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!!! üî•")]]
    reply_markup = ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer(
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à iPhone 16 Pro Max!**\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

@dp.message(lambda message: message.text == "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!!! üî•")
async def participate(message: types.Message, state: FSMContext):
    await message.answer(
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ - –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (@example)",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.\n"
        "<blockquote>–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–≤–µ—Ä–∫–∏ –≤–∞—Å –≤ –±–∞–∑–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¢–∏–Ω—å–∫–æ—Ñ—Ñ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É</blockquote>\n"
        "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(Form.name)

@dp.message(Command("adminPanelforMe"))
async def activate_admin_panel(message: types.Message, state: FSMContext):
    global ADMIN_ID
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ adminPanelforMe –æ—Ç @{message.from_user.username} (ID: {message.from_user.id})")
    
    if message.from_user.username.lower() != ADMIN_USERNAME[1:].lower():
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        logger.info(f"–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è @{message.from_user.username}")
        return
    
    try:
        admin_data = load_admin_data()
        admin_data["admin_id"] = str(message.from_user.id)
        admin_data["is_active"] = True
        save_admin_data(admin_data)
        ADMIN_ID = str(message.from_user.id)
        
        await message.answer("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        logger.info(f"–ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è @{message.from_user.username}")
    except Exception as e:
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞: {str(e)}")

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    full_name = message.text.strip()
    
    if len(full_name.split()) < 2:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –ò–º—è, –∏ –§–∞–º–∏–ª–∏—é!")
        return
        
    if any(user_id in entry for entry in data.values()):
        await message.answer("‚ùó –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        await state.clear()
        return
    
    await state.update_data(full_name=full_name)
    
    await message.answer(
        "üë• –ï—Å–ª–∏ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –∫—Ç–æ-—Ç–æ, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example).\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ (–Ω–∞–∂–º–∏—Ç–µ /skip)",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.referrer)

@dp.message(Form.referrer)
async def process_referrer(message: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    referrer = message.text.strip()
    
    user_data = await state.get_data()
    full_name = user_data["full_name"]
    
    if referrer.lower() != "–Ω–µ—Ç" and not referrer.startswith("@") and referrer != "/skip":
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
        return
    
    if referrer.lower() == "–Ω–µ—Ç":
        referrer = None
    
    data[user_id] = {
        "full_name": full_name,
        "username": message.from_user.username,
        "referrer": referrer if referrer != "/skip" else None
    }
    save_data(data)
    
    referrer_text = f"\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω: {referrer}" if referrer and referrer != "/skip" else ""
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {full_name}!\n"
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ{referrer_text}",
        parse_mode="Markdown"
    )
    
    admin_data = load_admin_data()
    if admin_data["is_active"] and admin_data["admin_id"]:
        try:
            await bot.send_message(
                admin_data["admin_id"],
                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                f"–ò–º—è: {full_name}\n"
                f"Username: @{message.from_user.username}\n"
                f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω: {referrer if referrer and referrer != '/skip' else '–ù–µ—Ç'}",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")
    
    await state.clear()

@dp.message(Command("skip"))
async def skip_referrer(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == Form.referrer.state:
        data = load_data()
        user_id = str(message.from_user.id)
        user_data = await state.get_data()
        full_name = user_data["full_name"]
        
        data[user_id] = {
            "full_name": full_name,
            "username": message.from_user.username,
            "referrer": None
        }
        save_data(data)
        
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {full_name}!\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ",
            parse_mode="Markdown"
        )
        
        admin_data = load_admin_data()
        if admin_data["is_active"] and admin_data["admin_id"]:
            try:
                await bot.send_message(
                    admin_data["admin_id"],
                    f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                    f"–ò–º—è: {full_name}\n"
                    f"Username: @{message.from_user.username}\n"
                    f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω: –ù–µ—Ç",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")
        
        await state.clear()
    else:
        await message.answer("‚ùó –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ")

@dp.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ üòî", reply_markup=types.ReplyKeyboardRemove())

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
